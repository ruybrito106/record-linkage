
==================== FINAL INTERFACE ====================
2018-06-18 02:13:12.3254 UTC

interface record-linkage-0.1.0.0-7jN1pRmyIyyilCy9jeUoZ:Generation 8022
  interface hash: ec8f95f488d13f97d25df6755e8fb8e8
  ABI hash: a0d4779020f3f549564d56d5db423c9c
  export-list hash: 1108a1ed72cb84511b80c44e99fd876f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d3f9096bac2e1e79f6ff76d0840aa157
  sig of: Nothing
  used TH splices: False
  where
exports:
  Generation.allFit
  Generation.bestFit
  Generation.evolve
  Generation.firstGeneration
module dependencies: Functions Individual Record
package dependencies: array-0.5.2.0 base-4.10.1.0*
                      containers-0.5.10.2 deepseq-1.4.3.0 disjoint-set-0.2
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 mtl-2.2.2 transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Individual 18367ed7d9ea3965f782e2581c638636
  exports: ea44b743f06960c953aec726e195f218
  Individual 32790441f32e23ca667eec7bcf549973
  fitness 32790441f32e23ca667eec7bcf549973
  sortByFitness 56f573aa30918fdc6b93f4fcde5ff127
  takeBest 65d66d831608b600fdd123a9a0d86206
  toList 42100f2b6c52608805d85a9fb8630960
99011a711255ae11be80b59b61b7ebf3
  $fShowGeneration :: GHC.Show.Show Generation.Generation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Generation.Generation
                  Generation.$fShowGeneration_$cshowsPrec
                  Generation.$fShowGeneration_$cshow
                  Generation.$fShowGeneration_$cshowList -}
99011a711255ae11be80b59b61b7ebf3
  $fShowGeneration1 :: Generation.Generation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Generation.Generation)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Generation.G ww1 ->
                 Generation.$w$cshowsPrec 0# ww1 w1 }) -}
4128e4a796c3c5a65363f7957504d76b
  $fShowGeneration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("G "#) -}
a52e5aab8f0acb98fc8cf456d52397dc
  $fShowGeneration3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
99011a711255ae11be80b59b61b7ebf3
  $fShowGeneration_$cshow :: Generation.Generation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Generation.Generation) ->
                 Generation.$fShowGeneration_$cshowsPrec
                   Generation.$fShowGeneration3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
99011a711255ae11be80b59b61b7ebf3
  $fShowGeneration_$cshowList ::
    [Generation.Generation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Generation.Generation
                   Generation.$fShowGeneration1) -}
99011a711255ae11be80b59b61b7ebf3
  $fShowGeneration_$cshowsPrec ::
    GHC.Types.Int -> Generation.Generation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Generation.Generation)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Generation.G ww3 ->
                 Generation.$w$cshowsPrec ww1 ww3 w2 } }) -}
952fd090b12d6c4b7a62e4b35312e822
  $tc'G :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11106323551348037774##
                   5175095213666081554##
                   Generation.$trModule
                   Generation.$tc'G2
                   0#
                   Generation.$tc'G1) -}
db30cfc0a33e48b12198e08349abcfb6
  $tc'G1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e66ad76ea64e0bad7fb7e9f1f9354f10
  $tc'G2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Generation.$tc'G3) -}
636ade391c3c0a157942967800bbe538
  $tc'G3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'G"#) -}
96c4304838740d175e4bdb0002b49937
  $tcGeneration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5412560831832091309##
                   2169310005402416391##
                   Generation.$trModule
                   Generation.$trModule1
                   0#
                   GHC.Types.krep$*) -}
b6fa86cd3ef83af2b8f279c969af9dfa
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Generation.$trModule3
                   Generation.$trModule1) -}
2690e59498b4962397d1dc27c7bf677b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Generation.$trModule2) -}
b6e83c2618d425ff6e661f86e38d7527
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Generation"#) -}
c0d9577fa14c62e8f625b48b46199564
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Generation.$trModule4) -}
64afdb1496244d08144515ab6a9ed326
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("record-linkage-0.1.0.0-7jN1pRmyIyyilCy9jeUoZ"#) -}
5bf2af55000839b58fb3ff540aa26de2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [Individual.Individual] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Individual.Individual])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Generation.$fShowGeneration2
                       (case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (case x1 of ww2 { Individual.I ww3 ww4 ww5 ww6 ->
                                Individual.$w$cshowsPrec
                                  0#
                                  ww3
                                  ww4
                                  ww5
                                  ww6
                                  (let {
                                     lvl20 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                   } in
                                   letrec {
                                     showl :: [Individual.Individual] -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Individual.Individual]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl20
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (case y of ww7 { Individual.I ww8 ww9 ww10 ww11 ->
                                               Individual.$w$cshowsPrec
                                                 0#
                                                 ww8
                                                 ww9
                                                 ww10
                                                 ww11
                                                 (showl ys) }) }
                                   } in
                                   showl xs) }) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
34db9bf981f1736b341ed8ee41372c54
  $wallFit :: [Individual.Individual] -> [GHC.Types.Float]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
b480bfccb737c43715511b320f6260fd
  $wbestFit :: [Individual.Individual] -> GHC.Prim.Float#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
99011a711255ae11be80b59b61b7ebf3
  data Generation = G [Individual.Individual]
135046a26f0e3a56bf2b6f05a8ba50ac
  allFit :: Generation.Generation -> [GHC.Types.Float]
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Generation.Generation) ->
                 case w of ww { Generation.G ww1 -> Generation.$wallFit ww1 }) -}
f7ac9225c262c9d7c0e4c9ab4a5b78fd
  bestFit :: Generation.Generation -> GHC.Types.Float
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Generation.Generation) ->
                 case w of ww { Generation.G ww1 ->
                 case Generation.$wbestFit ww1 of ww2 { DEFAULT ->
                 GHC.Types.F# ww2 } }) -}
d6b24a11798afc8433cb57c5222a89f9
  evolve :: Generation.Generation -> Generation.Generation
  {- Arity: 1, Strictness: <S,1*U(1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Generation.Generation) ->
                 case ds of wild { Generation.G as ->
                 Generation.G
                   (Individual.takeBest
                      (Data.OldList.sortBy
                         @ Individual.Individual
                         Individual.$fOrdIndividual_$ccompare
                         as)) }) -}
f2cb968cb72427fccf64c3289e72f56f
  firstGeneration :: Generation.Generation
  {- Strictness: m, Unfolding: (Generation.G Individual.toList) -}
instance [safe] GHC.Show.Show [Generation.Generation]
  = Generation.$fShowGeneration
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

