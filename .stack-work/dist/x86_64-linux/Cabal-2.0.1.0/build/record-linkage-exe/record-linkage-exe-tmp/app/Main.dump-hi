
==================== FINAL INTERFACE ====================
2018-06-18 02:13:13.724884 UTC

interface main:Main 8022
  interface hash: e4b64dc0bb50eb873fb78d84d4a6db86
  ABI hash: cfc55cfbf2eec24b80bdd420bc29c04e
  export-list hash: e8a705bb815cbcb5e7a446b4ccdff1d4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e45de50425c6c14cda30296d4ea97f38
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.evolveNTimes
  Main.main
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0*
                      containers-0.5.10.2 deepseq-1.4.3.0 disjoint-set-0.2
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 mtl-2.2.2
                      record-linkage-0.1.0.0 transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  record-linkage-0.1.0.0:Generation a0d4779020f3f549564d56d5db423c9c
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7427f087d05a4b672884dd2579283335
  $wevolveNTimes1 ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) => t -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),U(A,A,A,C(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: GHC.Num.Num t)
                   (w2 :: GHC.Classes.Eq t)
                   (w3 :: t) ->
                 let {
                   lvl :: t = GHC.Num.fromInteger @ t w1 Main.evolveNTimes4
                 } in
                 let {
                   lvl1 :: t = GHC.Num.fromInteger @ t w1 Main.evolveNTimes3
                 } in
                 let {
                   lvl2 :: m () <join 0> = GHC.Base.return @ m w @ () GHC.Tuple.()
                 } in
                 letrec {
                   $wevolveNTimes2 :: t -> m ()
                     <join 1> {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ (w4 :: t) ->
                     case GHC.Classes.== @ t w2 w4 lvl1 of wild {
                       GHC.Types.False -> $wevolveNTimes2 (GHC.Num.- @ t w1 w4 lvl)
                       GHC.Types.True -> lvl2 }
                 } in
                 $wevolveNTimes2 w3) -}
d40f69bd3b2043f0edeb3326a2803505
  evolveNTimes ::
    (GHC.Base.Monad m, GHC.Num.Num t, GHC.Classes.Eq t) =>
    t -> Generation.Generation -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),U(A,A,A,C(U),A)><L,U(A,C(C1(U)),A,A,A,A,C(U))><S(C(C(S))L),U(C(C1(U)),A)><L,U><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ t
                   @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: GHC.Num.Num t)
                   (w2 :: GHC.Classes.Eq t)
                   (w3 :: t)
                   (w4 :: Generation.Generation) ->
                 Main.$wevolveNTimes1 @ t @ m w w1 w2 w3) -}
0ad90e780545a29f9c493b84f50f9f83
  evolveNTimes3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
b88e5fd04c1fe693e421b73a96b9e542
  evolveNTimes4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
eaad1cf85983f830f890c9be9f23c0e0
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
574787a273d920718d453afcd1afef23
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   lvl :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = (# ipv, GHC.Tuple.() #)
                 } in
                 letrec {
                   $wevolveNTimes2 :: GHC.Integer.Type.Integer
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.eqInteger#
                            w
                            Main.evolveNTimes3 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> $wevolveNTimes2
                            (GHC.Integer.Type.minusInteger w Main.evolveNTimes4)
                       GHC.Types.True -> lvl } }
                 } in
                 $wevolveNTimes2 Main.main2 }) -}
676e02c027c52224fc4f4ae0d6730ce7
  main2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
fc6e37626e8fd6c6193537b154727ed1
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
0e8a83dd8ae7a601df8a9d4826170cc2
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("aa"#) -}
25980d3e1412385cbf205bcd155fea2a
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

